version: '3.8'

services:
  lightrag-watsonx:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: lightrag-watsonx
    ports:
      - "9621:9621"
      - "8080:8080"
    environment:
      # WatsonX Configuration
      - WATSONX_API_KEY=${WATSONX_API_KEY}
      - WATSONX_PROJECT_ID=${WATSONX_PROJECT_ID}
      - WATSONX_MODEL_ID=${WATSONX_MODEL_ID:-openai/gpt-oss-120b}
      - WATSONX_BASE_URL=${WATSONX_BASE_URL:-https://us-south.ml.cloud.ibm.com/ml/v1}
      
      # Embedding Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      
      # LightRAG Configuration
      - WORKING_DIR=/app/data/rag_storage
      - INPUT_DIR=/app/data/inputs
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - VERBOSE=${VERBOSE:-false}
      
      # Performance Settings
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
      
      # Cache Settings
      - ENABLE_LLM_CACHE=${ENABLE_LLM_CACHE:-true}
      - ENABLE_EMBEDDING_CACHE=${ENABLE_EMBEDDING_CACHE:-true}
      - CACHE_SIMILARITY_THRESHOLD=${CACHE_SIMILARITY_THRESHOLD:-0.90}
      
      # Token Tracking
      - ENABLE_TOKEN_TRACKING=${ENABLE_TOKEN_TRACKING:-true}
      - EXPORT_USAGE_REPORTS=${EXPORT_USAGE_REPORTS:-true}
      
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9621/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lightrag-network

  # Optional: Redis for advanced caching
  redis:
    image: redis:7-alpine
    container_name: lightrag-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - lightrag-network
    restart: unless-stopped

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: lightrag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - lightrag-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lightrag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - lightrag-network
    restart: unless-stopped

networks:
  lightrag-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data: